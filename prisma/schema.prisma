// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  role                UserRole  @default(USER)
  bio                 String?
  googleDriveConnected Boolean  @default(false)
  googleDriveFolderId String?   // 監視対象のGoogle DriveフォルダID
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  accounts            Account[]
  sessions            Session[]
  analyses            Analysis[]
  audioFiles          AudioFile[]
  videoFiles          VideoFile[]
}

enum UserRole {
  ADMIN
  USER
}

model Analysis {
  id              String   @id @default(cuid())
  analysisResults String?  // 分析結果をJSON形式で保存
  aiResponses     String?  @db.Text // AIのレスポンスを保存
  totalScore      Float?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  audioUrl        String?
  status          String   @default("pending")
  audioFileId     String?
  videoFileId     String?
  audioFile       AudioFile? @relation(fields: [audioFileId], references: [id])
  videoFile       VideoFile? @relation(fields: [videoFileId], references: [id])
}

model AudioFile {
  id          String   @id @default(cuid())
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  duration    Float?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses    Analysis[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VideoFile {
  id                String   @id @default(cuid())
  fileName          String
  fileUrl           String
  fileSize          Int
  mimeType          String   // mp4のみ
  duration          Float?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  googleDriveFileId String   // Google DriveのファイルID
  analyses          Analysis[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
